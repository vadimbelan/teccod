name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint (flake8)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: flake8
        run: flake8 app tests

  integration:
    name: Integration tests (docker compose)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (for pytest on host)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps for tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Enable Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & up web + OpenSearch
        run: |
          docker compose up -d --build web
          docker compose ps

      - name: Wait for web health
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then
              echo "web is healthy"
              break
            fi
            echo "waiting web... ($i)"
            sleep 2
          done

      - name: Wait for OpenSearch health
        shell: bash
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:9200 >/dev/null; then
              echo "OpenSearch is up"
              break
            fi
            echo "waiting OpenSearch... ($i)"
            sleep 2
          done

      - name: Init index & seed demo data
        run: |
          curl -s -X POST http://localhost:8000/init_index | python -m json.tool
          curl -s -X POST http://localhost:8000/seed | python -m json.tool

      - name: Run integration tests against API
        env:
          TEST_API_URL: "http://localhost:8000"
        run: |
          pytest -q -k search_examples

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs --no-color opensearch || true
          docker compose logs --no-color web || true

      - name: Tear down
        if: always()
        run: docker compose down -v
